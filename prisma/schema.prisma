generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  username  String?
  email     String?    @unique
  password  String?
  platforms Platform[]
  programs  Program[]
  reports   Report[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt

  @@map(name: "users")
}

model Platform {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  name           String
  slug           String    @unique
  email          String?
  password       String?
  hunterUsername String?
  otp            String?
  jwt            String?
  type           String
  programs       Program[]
  reports        Report[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt

  @@map(name: "platforms")
}

model Program {
  id         String   @id @default(cuid())
  platformId String
  platform   Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  report     Report[]
  name       String
  slug       String   @unique
  vdp        Boolean
  favourite  Boolean  @default(false)
  tag        String?
  url        String
  type       String
  bountyMin  Int?
  bountyMax  Int?
  scope      Scope[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map(name: "programs")
}

model Scope {
  id        String   @id @default(cuid())
  programId String
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  scope     String
  scopeType String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "scopes")
}

model Report {
  id          String   @id @default(cuid())
  platformId  String
  platform    Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  programId   String
  program     Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  reportId    String
  bounty      Float?
  currency    String?
  collab      Boolean
  status      String
  cvssVector  String?
  cvss        Float?
  createdDate DateTime
  updatedDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map(name: "reports")
}
